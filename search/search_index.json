{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Terraflex","text":""},{"location":"#useful-links","title":"Useful links","text":"<ul> <li>Getting started</li> <li>Checkout issues to see roadmap.</li> </ul>"},{"location":"#intro","title":"Intro","text":"<p>Construct custom backends for your terraform project!</p> <p>Warning</p> <p>This project is still WIP in early stages - there might be some bugs - you are welcome to open issues when any encounted</p>"},{"location":"#why","title":"why?","text":"<p>I started this project to provide a free solution for homelabs IAC. The major constraint here is to find a free backend that I feel safe to use and to have a 0 bootstrap layer if possible. I found several solutions around this - but most were using a 3rd party hosted http backend servers. Those backends were problematic for me because I had issues trusting them to store my sensitive state files - and the fact that I didn't own the storage location - made me afraid that I might lose those state files - and we all know how bad it is to lose your state files :P. The closest solution I found was terraform-backend-git - which this project was heavily influenced on - so go check it out as well! Eventually I had the idea of creating an extendable modular terraform http backend - which allows customizing the state using <code>transformations</code> (like encryption), and getting starting with it will be as simple as running single command.</p>"},{"location":"getting-started/01-intro/","title":"Intro","text":"<p>Terraflex is built in a modular way. To start configuring Terraflex yourself and even build your own plugins you will need to know few building blocks that Terraflex uses. Terraflex uses Terraform's http backend behind the scenes to serve and manage the Terraform state files.</p>"},{"location":"getting-started/01-intro/#concepts","title":"Concepts","text":"<p>Terraflex's building blocks are:</p> <ul> <li>Terraform Stack</li> <li>Storage provider</li> <li>Transformer</li> </ul>"},{"location":"getting-started/01-intro/#terraform-stack","title":"Terraform Stack","text":"<p>In Terraflex you can manage multiple Terraform state files - that are independent from each other. This allows you to have a single <code>terraflex.yaml</code> file (the config file of Terraflex) in your mono repo  and use multiples backends - one for each Terraform state file. Each state file - is refered as a Terraform stack. And each stack consists of a main storage provider to manage the state at, and a list of transformers that allows you to manipulate the state file - used for stuff like encryption.</p> <p>A stack is defined in <code>terraflex.yaml</code> under the <code>stacks</code> directive.</p> <p>Example</p> terraflex.yaml<pre><code>stacks:\n  stack-123: # this can be any name you would like - note that it will affect the http backend url.\n    transformers:\n      - transformer1\n      - transformer2\n    state_storage:\n      provider: storage-provider-1\n      params:\n        path: terraform.tfstate\n</code></pre> <p>This structure allows you to define different stacks and each stack to have it's own transformer or storage class if required.  </p> <p>See reference here.</p>"},{"location":"getting-started/01-intro/#storage-provider","title":"Storage provider","text":"<p>Storage providers are an abstract way to allow file saving and reading. It can be used either to store the Terraform state file - or even to use for extensions in transformers. For example age encryption provider uses a generic storage provider approach to fetch it's private key from a configurable source.  </p> <p>A storage provider is defined under the <code>storage_providers</code> directive inside <code>terraflex.yaml</code>.</p> <p>Example</p> terraflex.yaml<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n</code></pre> <p>See reference here.</p>"},{"location":"getting-started/01-intro/#transformer","title":"Transformer","text":"<p>Transformer is a middleware between the state storing and reading that allows you to manipulate the state file in different ways. An example for such transformer is the encryption transformer - that allows you to encrypt the state file before it's stored in the storage provider, and decrypt the state file after it's read from it.</p> <p>A transformer is defined under the <code>transformers</code> directive inside <code>terraflex.yaml</code>.</p> <p>Example</p> terraflex.yaml<pre><code>transformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: envvar-example # Make sure name is matching your storage provider\n      params:\n        key: AGE_KEY # The environment variable name to use for the encryption key\n</code></pre> <p>See reference here.</p>"},{"location":"getting-started/01-intro/#whats-next","title":"What's next?","text":"<p>Check out the getting started guides to jump right on the action. Also go to the reference to learn a little bit more about <code>terraflex.yaml</code> and the diffrent component it has.  </p>"},{"location":"getting-started/02-installation/","title":"Installation","text":"<p>Installing Terraflex should be as simple as using pipx install. If you don't already have <code>pipx</code> installed on your computer, please refer to their docs to install it first. <code>pipx</code> allows Terraflex to be installed in an isolated environments - which reduces anomalies - and global workspace pollution.  </p> <pre><code>$ pipx install terraflex\n</code></pre> <p>To upgrade terraflex use: <pre><code>$ pipx upgrade terraflex\n</code></pre></p> <p>You can also upgrade the python version that Terraflex is using: <pre><code>$ pipx reinstall terraflex --python=&lt;path to newer python binary&gt;\n</code></pre></p> <p>If you don't want to use <code>pipx</code> you can still use <code>pip</code> to install Terraflex in your global environment.</p>"},{"location":"getting-started/examples/1password-storage-provider/","title":"1Password storage provider","text":"<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n\n  onepassword-example: # Initialize new storage provider - name can be anything\n    type: onepassword # In this case we use `1password` storage provider\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: onepassword-example # Make sure name is matching your storage provider\n      params:\n        reference_uri: op://AutomationIAC/iac-terraform-age-key/password # The reference URI to use for the encryption key\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: git-storage # In this case we use our git storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"getting-started/examples/all-local/","title":"All local configuration","text":"<pre><code>storage_providers:\n  local: # Initialize new storage provider - name can be anything\n    type: local\n    folder: ~/states/\n\n  encryption-dir:\n    type: local\n    folder: ~/secrets/\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: encryption-dir # Make sure name is matching your storage provider\n      params:\n        path: age-key.txt # The path to the encryption key file inside ~/secrets/\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: local # In this case we use our local storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"getting-started/examples/envvar-storage-provider/","title":"EnvVar storage provider","text":"<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n\n  envvar-example: # Initialize new storage provider - name can be anything\n    type: envvar # In this case we use `envvar` storage provider\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: envvar-example # Make sure name is matching your storage provider\n      params:\n        key: AGE_KEY # The environment variable name to use for the encryption key\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: git-storage # In this case we use our git storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"getting-started/guides/01-setting-up-git/","title":"Setting up git backend","text":"<p>Setting up git backend requires a short setup. The main advantage with it - is that the \"bootstrap\" layer for this setup is really minimal -  and requires basically creating a new repository to store your state at. This guide will walkthrough you to create a git backend in Github. If you already have a repository - skip right to step 3.  </p>"},{"location":"getting-started/guides/01-setting-up-git/#architechture","title":"Architechture","text":"<p>We are going to have total of 2 repositories. One repository should be your usual IAC terraform repository - you should already have one - or create a new one. The second repository will be to manage the terraform state - and it's recommended to be separately from the IAC repo. Terraflex is going to manage this repository automatically - and it's going to be cloned by default at: <code>~/.local/share/terraflex/git_storage/&lt;state-repo-name&gt;</code>.  </p> <p></p>"},{"location":"getting-started/guides/01-setting-up-git/#links","title":"Links","text":"<p>Checkout used repositories in this guide: - State repository - IAC</p>"},{"location":"getting-started/guides/01-setting-up-git/#step-1-create-a-new-repository","title":"Step 1 - Create a new repository","text":"<p>Login into github open the menu in the top right - and click on <code>New repository</code>. </p> <p>In the opened form select the owner as your current user or organization. Enter a new name for your state repository. It's recommended to set the repository visablilty to private - but you can set it to either public or private -  doesn't really matter (as the state will be encrypted in our example). I will create it as public to allow you to see the repository later on. </p> <p>After creating the repository - you should see something similar to the following: </p>"},{"location":"getting-started/guides/01-setting-up-git/#step-2-initialize-the-state-repository","title":"Step 2 - Initialize the state repository","text":"<p>Go to your terminal and initialize the state repository in your favorite way. In my case I'm going to use the following snippet: <pre><code>mkdir tf-state-example\ncd tf-state-example\necho \"# tf-state-example\" &gt; README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin git@github.com:IamShobe/tf-state-example.git\ngit push -u origin main\n</code></pre></p> <p>Failure</p> <p>Make sure to adjust the commands to your repository path! - otherwise you will encounter some permissions issues or not found errors etc...</p> <p>Once done - your repository should look something like that: </p> <p>Keep the remote origin url: </p> <p>In my case it's <code>git@github.com:IamShobe/tf-state-example.git</code>.</p>"},{"location":"getting-started/guides/01-setting-up-git/#step-3-create-a-terraflexyaml-file-in-your-target-terraform-folder","title":"Step 3 - Create a terraflex.yaml file in your target terraform folder","text":"<p>You can complete this step by either creating this file yourself - or automatically using <code>terraflex init</code>. In this guide we will be using <code>terraflex init</code>.  </p> <p>Go to your IAC repository - and run: <pre><code>$ terraflex init\n</code></pre> A new wizard should be created - follow the instructions and fill all the required fields.</p> <p></p> <p>Once done, a snippet should be printed on your screen to allow you to setup the new terraform backend. In my example: <pre><code>backend \"http\" {\n    address = \"http://localhost:8600/main/state\"\n    lock_address = \"http://localhost:8600/main/lock\"\n    lock_method = \"PUT\"\n    unlock_address = \"http://localhost:8600/main/lock\"\n    unlock_method = \"DELETE\"\n}\n</code></pre></p>"},{"location":"getting-started/guides/01-setting-up-git/#step-4-configuring-your-terraform-backend-to-work-against-the-new-backend","title":"Step 4 - Configuring your terraform backend to work against the new backend","text":"<p>Open your terraform config file and change the backend to the backend snippet from last step:</p> <p></p> <p>Save the file and that's it! We are ready to test up everything!</p>"},{"location":"getting-started/guides/01-setting-up-git/#step-5-initializing-backend-and-migrating-state","title":"Step 5 - Initializing backend and migrating state","text":"<p>If you already used the terraform with a different backend - you can migrate the state using: <pre><code>$ terraflex wrap -- terraform init -migrate-state\n</code></pre></p> <p>In my case I'm stating a new IAC repository so I can simply use: <pre><code>$ terraflex wrap -- terraform init\n</code></pre></p> <p>For any terraform command use <code>terraflex wrap</code> to startup the backend while the terraform command is running!  </p> <p></p> <p>Danger</p> <p>Keeping secrets in disk is not ideal - you might lose your key if you lose your disk - which means you might lose your access to your state file. Make sure to backup the secret somewhere safe - so it will be recoverable. If you have password managers like 1Password, Bitwarden or any other - make sure to back it up there. Terraflex actually supports integration with 1Password - so you wont need to hold a copy of it on your disk.</p>"},{"location":"getting-started/guides/02-encryption-using-1password/","title":"Encryption using 1Password","text":"<p>Checkout 1Password Reference. Also checkout 1Password Full Example. Checkout IAC repo example.  </p>"},{"location":"getting-started/guides/02-encryption-using-1password/#creating-new-item-in-1password","title":"Creating new item in 1Password","text":"<p>Copy the content of the created key from previous guide: <pre><code>$ cat ~/secrets/age-key.txt # make sure the file name matches your created key!\n\n$ cat ~/secrets/age-key.txt | pbcopy  # in Mac you can use pycopy to copy it to your clipboard right away\n\n$ cat ~/secrets/age-key.txt | xclip -selection clipboard  # with xclip\n</code></pre></p> <p>Create new login item in 1Password -  In my case I will create a new Vault named <code>AutomationIAC</code>, and a new login item named <code>iac-terraform-age-key</code>.</p> <p>Inside the <code>password</code> field paste the content of your copied private key.</p> <p>Then we will construct the <code>reference uri</code> for that private key. The structure of the <code>refrence uri</code> is: <code>op://&lt;vault&gt;/&lt;item&gt;/&lt;field&gt;</code>. This means that my private key reference uri is compose into: <code>op://AutomationIAC/iac-terraform-age-key/password</code>.</p>"},{"location":"getting-started/guides/02-encryption-using-1password/#modifying-terraflexyaml","title":"Modifying <code>terraflex.yaml</code>","text":"<p>Using 1Password as the encryption storage provider is as simple as editing the <code>terraflex.yaml</code> file generated from the previous guide.  </p> <p>Change the storage provider used by the <code>encryption</code> to be of type <code>onepassword</code>: <pre><code>storage_providers:\n  encryption:\n    type: onepassword\n</code></pre></p> <p>In the encyrption transformer make sure to update the parameters for your 1Password item: <pre><code>transformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: encryption # Make sure name is matching your storage provider\n      params:\n        reference_uri: op://AutomationIAC/iac-terraform-age-key/password # The reference URI to use for the encryption key\n</code></pre> Change the <code>reference uri</code> according to your created item.</p> <p>That's it we are done! Try to run any Terraform command that uses the state - to make sure everything works. <pre><code>$ terraflex wrap -- terraform plan\n</code></pre></p>"},{"location":"getting-started/guides/02-encryption-using-1password/#cleanups","title":"Cleanups","text":"<p>You can now remove the old secret from the disk so the only source of truth will be 1Password. <pre><code>$ rm ~/secrets/age-key.txt\n</code></pre></p>"},{"location":"reference/commands/init/","title":"init","text":"<pre><code>$ terraflex init --help\nUsage: terraflex init [OPTIONS]\n\n  Initialize the configuration file for the server in current directory.\n\n  Starts an interactive wizard to create the configuration file.\n\n  Output will be a file named `terraflex.yaml` in the current directory.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"reference/commands/print-bindings/","title":"print-bindings","text":"<pre><code>$ terraflex print-bindings --help\nUsage: terraflex print-bindings [OPTIONS] STACK_NAME\n\n  Prints the terraform backend configuration for the given stack name and\n  port.\n\nArguments:\n  STACK_NAME  Name of the stack  [required]\n\nOptions:\n  --port INTEGER  Port to run the server on  [default: 8600]\n  --help          Show this message and exit.\n</code></pre>"},{"location":"reference/commands/start/","title":"start","text":"<pre><code>$ terraflex start --help\nUsage: terraflex start [OPTIONS]\n\n  Starts the server with the configuration file in the current directory.\n\nOptions:\n  --port INTEGER  Port to run the server on  [default: 8600]\n  --help          Show this message and exit.\n</code></pre>"},{"location":"reference/commands/wrap/","title":"wrap","text":"<pre><code>$ terraflex wrap --help\nUsage: terraflex wrap [OPTIONS] ARGS...\n\n  Main command that allows wrapping any command with the context of the server\n  running.\n\n  Its main purpose is to allow running terraform commands with the server\n  running.\n\n  Examples: $ terraflex wrap -- terraform init\n\nArguments:\n  ARGS...  Command to run  [required]\n\nOptions:\n  -v, --verbose   Print more details about the backend\n  --port INTEGER  Port to run the server on  [default: 8600]\n  --help          Show this message and exit.\n</code></pre>"},{"location":"reference/encryption-providers/age/","title":"Age","text":"<p>Uses age file encryption.  </p> <p>Note</p> <p>You don't need to have <code>age</code> binary installed in your <code>PATH</code> - terraflex plugin will automatically download a compatible plugin.</p> <p>Age encryption type works with the Encryption state transformer. The encryption plugin was designed to work with any   type storage provider (basically any storage provider). The recommended storage providers are: EnvVar or 1Password if owned, but you can always use Local storage provider or even a custom built storage provider.</p> <p>Warning</p> <p>Do not lose your private key - if you already started using Terraflex with the encryption key - and you lost your encryption key - there is no way to recover the state file.</p> <p>Tip</p> <p>Use 1Password storage provider if possible to make it much more less probable for you to lose your encryption key.</p>"},{"location":"reference/encryption-providers/age/#usage","title":"Usage","text":"<p>Configuration for the Age encryption provider.</p> <p>Attributes:</p> Name Type Description <code>import_from_storage</code> <code>StorageProviderUsageConfig</code> <p>usage reference to the storage provider where the private key is stored.</p> Source code in <code>terraflex/plugins/encryption_transformation/age/provider.py</code> <pre><code>class AgeKeyConfig(BaseModel):\n    \"\"\"Configuration for the Age encryption provider.\n\n    Attributes:\n        import_from_storage: usage reference to the storage provider where the private key is stored.\n    \"\"\"\n\n    import_from_storage: StorageProviderUsageConfig\n</code></pre>"},{"location":"reference/encryption-providers/age/#example","title":"Example","text":"<p>Here is an example for a config file that uses age encryption:  </p> terraflex.yaml<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n\n  envvar-example: # Initialize new storage provider - name can be anything\n    type: envvar # In this case we use `envvar` storage provider\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: envvar-example # Make sure name is matching your storage provider\n      params:\n        key: AGE_KEY # The environment variable name to use for the encryption key\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: git-storage # In this case we use our git storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"reference/general/01-terraflex_yaml/","title":"terraflex.yaml","text":"<p><code>terraflex.yaml</code> is the main config file terraflex looks at. This file must be at the root of where <code>terraflex</code> is being run at.  </p> <p>Tip</p> <p>Checkout the examples section at Getting Started tab.</p>"},{"location":"reference/general/01-terraflex_yaml/#models","title":"Models","text":""},{"location":"reference/general/01-terraflex_yaml/#terraflex.server.config.ConfigFile","title":"<code>ConfigFile</code>","text":"<p>The configuration file for terraflex.</p> <p>Attributes:</p> Name Type Description <code>version</code> <code>str</code> <p>The version of the configuration file.</p> <code>storage_providers</code> <code>dict[str, StorageProviderConfig]</code> <p>The configuration for the storage providers.</p> <code>transformers</code> <code>dict[str, TransformerConfig]</code> <p>The configuration for the transformers.</p> <code>stacks</code> <code>dict[str, StackConfig]</code> <p>The configuration for the stacks.</p> Source code in <code>terraflex/server/config.py</code> <pre><code>class ConfigFile(BaseModel):\n    \"\"\"The configuration file for terraflex.\n\n    Attributes:\n        version: The version of the configuration file.\n        storage_providers: The configuration for the storage providers.\n        transformers: The configuration for the transformers.\n        stacks: The configuration for the stacks.\n    \"\"\"\n\n    version: str = CONFIG_VERSION\n    storage_providers: dict[str, StorageProviderConfig]\n    transformers: dict[str, TransformerConfig]\n    stacks: dict[str, StackConfig]\n\n    @field_validator(\"version\")\n    @classmethod\n    def validate_version(cls, value: str) -&gt; str:\n        current_version = semver.Version.parse(value, optional_minor_and_patch=True)\n        config_version = semver.Version.parse(CONFIG_VERSION, optional_minor_and_patch=True)\n        if current_version &lt; config_version:\n            raise ValueError(\n                f\"Unsupported version ({current_version} &lt; {config_version}) - please upgrade the config file\"\n            )\n\n        if current_version &gt; config_version:\n            raise ValueError(\n                f\"Unsupported version ({current_version} &gt; {config_version}) - please check if there is a newer version of {PACKAGE_NAME}\"\n            )\n\n        return value\n</code></pre>"},{"location":"reference/general/01-terraflex_yaml/#terraflex.server.config.StackConfig","title":"<code>StackConfig</code>","text":"<p>Configuration for a terraform stack.</p> <p>Attributes:</p> Name Type Description <code>state_storage</code> <code>StorageProviderUsageConfig</code> <p>The storage provider configuration for the state file.</p> <code>transformers</code> <code>list[str]</code> <p>The list of transformers to apply to the data.</p> Source code in <code>terraflex/server/config.py</code> <pre><code>class StackConfig(BaseModel):\n    \"\"\"Configuration for a terraform stack.\n\n    Attributes:\n        state_storage: The storage provider configuration for the state file.\n        transformers: The list of transformers to apply to the data.\n    \"\"\"\n\n    state_storage: StorageProviderUsageConfig\n    transformers: list[str]\n</code></pre>"},{"location":"reference/general/01-terraflex_yaml/#terraflex.server.config.TransformerConfig","title":"<code>TransformerConfig</code>","text":"<p>Base Transformer configuration.</p> <p>Each transformer defines it's own unique configuration parameters - and the parameters will be passed through to the transformer.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>The type of the transformer.</p> <code>**kwargs</code> <code>str</code> <p>Additional configuration for the transformer.</p> Source code in <code>terraflex/server/config.py</code> <pre><code>class TransformerConfig(BaseModel):\n    \"\"\"Base Transformer configuration.\n\n    Each transformer defines it's own unique configuration parameters -\n    and the parameters will be passed through to the transformer.\n\n    Attributes:\n        type: The type of the transformer.\n        **kwargs: Additional configuration for the transformer.\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    type: str\n</code></pre>"},{"location":"reference/general/01-terraflex_yaml/#terraflex.server.config.StorageProviderConfig","title":"<code>StorageProviderConfig</code>","text":"<p>Data struct that contains the configuration for a storage provider.</p> <p>Each storage provider defines it's own unique configuration parameters - and the parameters will be passed through to the storage provider.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str</code> <p>storage provider type as declared in the entrypoint.</p> <code>**kwargs</code> <code>str</code> <p>storage provider specific configuration parameters.</p> Example <p>In this example, the <code>local</code> storage provider has a <code>folder</code> parameter that is required. The storage provider will get a dict: <code>{\"folder\": \"/path/to/folder\"}</code> as the configuration.</p> <pre><code>type: local\nfolder: /path/to/folder\n</code></pre> Source code in <code>terraflex/server/config.py</code> <pre><code>class StorageProviderConfig(BaseModel):\n    \"\"\"Data struct that contains the configuration for a storage provider.\n\n    Each storage provider defines it's own unique configuration parameters -\n    and the parameters will be passed through to the storage provider.\n\n    Attributes:\n        type: storage provider type as declared in the entrypoint.\n        **kwargs: storage provider specific configuration parameters.\n\n    Example:\n        In this example, the `local` storage provider has a `folder` parameter that is required.\n        The storage provider will get a dict: `{\"folder\": \"/path/to/folder\"}` as the configuration.\n\n        ```yaml\n        type: local\n        folder: /path/to/folder\n        ```\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    type: str\n</code></pre>"},{"location":"reference/general/01-terraflex_yaml/#terraflex.server.config.StorageProviderUsageConfig","title":"<code>StorageProviderUsageConfig</code>","text":"<p>Data struct that contains the parameters that link to a specific file in a given storage provider.</p> <p>Each storage provider defines it's own unique usage parameters.</p> <p>Please refer to your storage provider usage config for key specification.</p> <p>Attributes:</p> Name Type Description <code>provider</code> <code>str</code> <p>storage provider name defined in <code>storage_providers</code> section of the config file.</p> <code>params</code> <code>Optional[dict[str, Any]]</code> <p>storage provider specific usage parameters - each storage provider defines it's own params - and this dict will be processed and validated dynamically by each storage provider.</p> Example <p>This is an example of a <code>local</code> storage provider usage config: <pre><code>provider: local\nparams:\n    path: ./path/to/item.txt\n</code></pre></p> Source code in <code>terraflex/server/config.py</code> <pre><code>class StorageProviderUsageConfig(BaseModel):\n    \"\"\"Data struct that contains the parameters that link to a specific file in a given storage provider.\n\n    Each storage provider defines it's own unique usage parameters.\n\n    Please refer to your storage provider usage config for key specification.\n\n    Attributes:\n        provider: storage provider name defined in `storage_providers` section of the config file.\n        params: storage provider specific usage parameters - each storage provider defines it's own params -\n            and this dict will be processed and validated dynamically by each storage provider.\n\n    Example:\n        This is an example of a `local` storage provider usage config:\n        ```yaml\n        provider: local\n        params:\n            path: ./path/to/item.txt\n        ```\n    \"\"\"\n\n    provider: str\n    params: Optional[dict[str, Any]] = None\n</code></pre>"},{"location":"reference/general/02-storage-providers/","title":"Storage Provider Types","text":"<p>Storage provider is one of the building blocks in <code>Terraflex</code> - it defines an abstract way to communicate with a storage of any kind. A new storage provider can easily be provided by implementing one of the protocols below -  and registering into <code>terraflex.plugins.storage_provider</code> entrypoint.</p>"},{"location":"reference/general/02-storage-providers/#readable-storage","title":"Readable Storage","text":""},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.StorageProviderProtocol","title":"<code>StorageProviderProtocol</code>","text":"<p>Protocol for storage providers - Read only.</p> <p>Readable storage is the most basic storage provider - it allows to read files from the storage.</p> <p>Every readonly storage provider must implement <code>StorageProviderProtocol</code> methods - and register to the <code>terraflex.plugins.storage_provider</code> entrypoint.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>@runtime_checkable\nclass StorageProviderProtocol(Protocol):\n    \"\"\"Protocol for storage providers - Read only.\n\n    Readable storage is the most basic storage provider - it allows to read files from the storage.\n\n    Every readonly storage provider must implement `StorageProviderProtocol` methods -\n    and register to the `terraflex.plugins.storage_provider` entrypoint.\n    \"\"\"\n\n    @classmethod\n    async def from_config(\n        cls,\n        raw_config: Any,\n        *,\n        manager: DependenciesManager,\n        workdir: pathlib.Path,\n    ) -&gt; Self:\n        \"\"\"Create an instance of the storage provider from the configuration.\n\n        Args:\n            raw_config: The raw configuration propagated from the storage provider config.\n            manager: The dependencies manager - allows to request a binary path from.\n            workdir: The data directory of terraflex - located at `~/.local/share/terraflex` -\n                can be used to manage state of the provider\n        \"\"\"\n        ...\n\n    @classmethod\n    def validate_key(cls, key: dict[str, Any]) -&gt; ItemKey:\n        \"\"\"Validate the key of the item in the storage provider from a config of usage.\n\n        Args:\n            key: a dict with parameters to build the key of the item.\n\n        Returns:\n            The validated key.\n        \"\"\"\n        ...\n\n    # read related\n    async def get_file(self, item_identifier: ItemKey) -&gt; bytes:\n        \"\"\"Get the content of the file.\n\n        Args:\n            item_identifier: The identifier of the file.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.StorageProviderProtocol.from_config","title":"<code>from_config(raw_config, *, manager, workdir)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create an instance of the storage provider from the configuration.</p> <p>Parameters:</p> Name Type Description Default <code>raw_config</code> <code>Any</code> <p>The raw configuration propagated from the storage provider config.</p> required <code>manager</code> <code>DependenciesManager</code> <p>The dependencies manager - allows to request a binary path from.</p> required <code>workdir</code> <code>Path</code> <p>The data directory of terraflex - located at <code>~/.local/share/terraflex</code> - can be used to manage state of the provider</p> required Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>@classmethod\nasync def from_config(\n    cls,\n    raw_config: Any,\n    *,\n    manager: DependenciesManager,\n    workdir: pathlib.Path,\n) -&gt; Self:\n    \"\"\"Create an instance of the storage provider from the configuration.\n\n    Args:\n        raw_config: The raw configuration propagated from the storage provider config.\n        manager: The dependencies manager - allows to request a binary path from.\n        workdir: The data directory of terraflex - located at `~/.local/share/terraflex` -\n            can be used to manage state of the provider\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.StorageProviderProtocol.get_file","title":"<code>get_file(item_identifier)</code>  <code>async</code>","text":"<p>Get the content of the file.</p> <p>Parameters:</p> Name Type Description Default <code>item_identifier</code> <code>ItemKey</code> <p>The identifier of the file.</p> required Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>async def get_file(self, item_identifier: ItemKey) -&gt; bytes:\n    \"\"\"Get the content of the file.\n\n    Args:\n        item_identifier: The identifier of the file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.StorageProviderProtocol.validate_key","title":"<code>validate_key(key)</code>  <code>classmethod</code>","text":"<p>Validate the key of the item in the storage provider from a config of usage.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>dict[str, Any]</code> <p>a dict with parameters to build the key of the item.</p> required <p>Returns:</p> Type Description <code>ItemKey</code> <p>The validated key.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>@classmethod\ndef validate_key(cls, key: dict[str, Any]) -&gt; ItemKey:\n    \"\"\"Validate the key of the item in the storage provider from a config of usage.\n\n    Args:\n        key: a dict with parameters to build the key of the item.\n\n    Returns:\n        The validated key.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.ItemKey","title":"<code>ItemKey</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>Params required to reference an item in a storage provider.</p> <p>Every storage provider must implement a subclass of <code>ItemKey</code> to represent the key of the item - using the validate_key() method.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>class ItemKey(BaseModel, abc.ABC):\n    \"\"\"Params required to reference an item in a storage provider.\n\n    Every storage provider must implement a subclass of `ItemKey` to represent the key of the item - using the validate_key() method.\n    \"\"\"\n\n    @abc.abstractmethod\n    def as_string(self) -&gt; str:\n        \"\"\"Return the string representation of the key.\"\"\"\n        ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.ItemKey.as_string","title":"<code>as_string()</code>  <code>abstractmethod</code>","text":"<p>Return the string representation of the key.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>@abc.abstractmethod\ndef as_string(self) -&gt; str:\n    \"\"\"Return the string representation of the key.\"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#writeable-storage","title":"Writeable Storage","text":""},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.WriteableStorageProviderProtocol","title":"<code>WriteableStorageProviderProtocol</code>","text":"<p>               Bases: <code>StorageProviderProtocol</code>, <code>Protocol</code></p> <p>Protocol for storage providers - Writeable.</p> <p>Writeable storage provider allows to write files to the storage.</p> <p>Every writeable storage provider must implement <code>WriteableStorageProviderProtocol</code> methods and its parent methods -     and register to the <code>terraflex.plugins.storage_provider</code> entrypoint.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>@runtime_checkable\nclass WriteableStorageProviderProtocol(StorageProviderProtocol, Protocol):\n    \"\"\"Protocol for storage providers - Writeable.\n\n    Writeable storage provider allows to write files to the storage.\n\n    Every writeable storage provider must implement `WriteableStorageProviderProtocol` methods and its parent methods -\n        and register to the `terraflex.plugins.storage_provider` entrypoint.\n    \"\"\"\n\n    # write related\n    async def put_file(self, item_identifier: ItemKey, data: bytes) -&gt; None:\n        \"\"\"Put the content of the file in the provided file.\n\n        Args:\n            item_identifier: The identifier of the file.\n            data: The content of the file.\n        \"\"\"\n        ...\n\n    async def delete_file(self, item_identifier: ItemKey) -&gt; None:\n        \"\"\"Delete the file.\n\n        Args:\n            item_identifier: The identifier of the file.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.WriteableStorageProviderProtocol.delete_file","title":"<code>delete_file(item_identifier)</code>  <code>async</code>","text":"<p>Delete the file.</p> <p>Parameters:</p> Name Type Description Default <code>item_identifier</code> <code>ItemKey</code> <p>The identifier of the file.</p> required Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>async def delete_file(self, item_identifier: ItemKey) -&gt; None:\n    \"\"\"Delete the file.\n\n    Args:\n        item_identifier: The identifier of the file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.WriteableStorageProviderProtocol.put_file","title":"<code>put_file(item_identifier, data)</code>  <code>async</code>","text":"<p>Put the content of the file in the provided file.</p> <p>Parameters:</p> Name Type Description Default <code>item_identifier</code> <code>ItemKey</code> <p>The identifier of the file.</p> required <code>data</code> <code>bytes</code> <p>The content of the file.</p> required Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>async def put_file(self, item_identifier: ItemKey, data: bytes) -&gt; None:\n    \"\"\"Put the content of the file in the provided file.\n\n    Args:\n        item_identifier: The identifier of the file.\n        data: The content of the file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#lockable-storage","title":"Lockable Storage","text":""},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.LockableStorageProviderProtocol","title":"<code>LockableStorageProviderProtocol</code>","text":"<p>               Bases: <code>WriteableStorageProviderProtocol</code>, <code>Protocol</code></p> <p>Protocol for storage providers - Lockable.</p> <p>Lockable storage provider allows to lock items to prevent concurrent writes. Allows to support terraform state locking - see more at official docs.</p> <p>Every lockable storage provider must implement <code>LockableStorageProviderProtocol</code> methods and its parent methods -     and register to the <code>terraflex.plugins.storage_provider</code> entrypoint.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>@runtime_checkable\nclass LockableStorageProviderProtocol(WriteableStorageProviderProtocol, Protocol):\n    \"\"\"Protocol for storage providers - Lockable.\n\n    Lockable storage provider allows to lock items to prevent concurrent writes.\n    Allows to support terraform state locking - see more at official [docs](https://developer.hashicorp.com/terraform/language/state/locking).\n\n    Every lockable storage provider must implement `LockableStorageProviderProtocol` methods and its parent methods -\n        and register to the `terraflex.plugins.storage_provider` entrypoint.\n    \"\"\"\n\n    # lock related\n    async def read_lock(self, item_identifier: ItemKey) -&gt; LockBody:\n        \"\"\"Read the lock of the item.\n\n        Args:\n            item_identifier: The identifier of the item.\n\n        Returns:\n            The lock data of the item.\n        \"\"\"\n        ...\n\n    async def acquire_lock(self, item_identifier: ItemKey, data: LockBody) -&gt; None:\n        \"\"\"Acquire the lock of the item.\n\n        Args:\n            item_identifier: The identifier of the item.\n            data: The lock data of the item.\n        \"\"\"\n        ...\n\n    async def release_lock(self, item_identifier: ItemKey) -&gt; None: ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.LockableStorageProviderProtocol.acquire_lock","title":"<code>acquire_lock(item_identifier, data)</code>  <code>async</code>","text":"<p>Acquire the lock of the item.</p> <p>Parameters:</p> Name Type Description Default <code>item_identifier</code> <code>ItemKey</code> <p>The identifier of the item.</p> required <code>data</code> <code>LockBody</code> <p>The lock data of the item.</p> required Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>async def acquire_lock(self, item_identifier: ItemKey, data: LockBody) -&gt; None:\n    \"\"\"Acquire the lock of the item.\n\n    Args:\n        item_identifier: The identifier of the item.\n        data: The lock data of the item.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.LockableStorageProviderProtocol.read_lock","title":"<code>read_lock(item_identifier)</code>  <code>async</code>","text":"<p>Read the lock of the item.</p> <p>Parameters:</p> Name Type Description Default <code>item_identifier</code> <code>ItemKey</code> <p>The identifier of the item.</p> required <p>Returns:</p> Type Description <code>LockBody</code> <p>The lock data of the item.</p> Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>async def read_lock(self, item_identifier: ItemKey) -&gt; LockBody:\n    \"\"\"Read the lock of the item.\n\n    Args:\n        item_identifier: The identifier of the item.\n\n    Returns:\n        The lock data of the item.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.LockableStorageProviderProtocol.release_lock","title":"<code>release_lock(item_identifier)</code>  <code>async</code>","text":"Source code in <code>terraflex/server/storage_provider_base.py</code> <pre><code>async def release_lock(self, item_identifier: ItemKey) -&gt; None: ...\n</code></pre>"},{"location":"reference/general/02-storage-providers/#terraflex.server.storage_provider_base.LockBody","title":"<code>LockBody</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data struct that contains the lock information.</p> <p>This is the same data struct that is required by terraform. It follows the same fields names as the terraform lock file.</p> <p>See offical source.</p> <p>Attributes:</p> Name Type Description <code>ID</code> <code>str</code> <p>The ID of the lock.</p> <code>Operation</code> <code>str</code> <p>The operation that is being performed.</p> <code>Who</code> <code>str</code> <p>The entity that is performing the operation.</p> <code>Version</code> <code>str</code> <p>The version of the lock.</p> <code>Created</code> <code>str</code> <p>The time when the lock was created.</p> Source code in <code>terraflex/server/base_state_lock_provider.py</code> <pre><code>class LockBody(BaseModel):\n    \"\"\"Data struct that contains the lock information.\n\n    This is the same data struct that is required by terraform.\n    It follows the same fields names as the terraform lock file.\n\n    See offical [source](https://github.com/hashicorp/terraform/blob/aea5c0cc180e0e6915454b3bf61f471c230c111b/internal/states/statemgr/locker.go#L129).\n\n    Attributes:\n        ID: The ID of the lock.\n        Operation: The operation that is being performed.\n        Who: The entity that is performing the operation.\n        Version: The version of the lock.\n        Created: The time when the lock was created.\n    \"\"\"\n\n    model_config = ConfigDict(from_attributes=True)\n\n    ID: str\n    Operation: str\n    Who: str\n    Version: str\n    Created: str\n</code></pre>"},{"location":"reference/general/03-transformers/","title":"Transformers","text":"<p>Transformers' main purpose is to manipulate the state before it goes into the storage provider.  </p>"},{"location":"reference/general/03-transformers/#terraflex.server.transformation_base.TransformerProtocol","title":"<code>TransformerProtocol</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for state transformation providers.</p> <p>Every state transformation provider must implement <code>TransformerProtocol</code> methods - and register to the <code>terraflex.plugins.transformer</code> entrypoint.</p> Example <p>Register encryption transformer - if your project is based on poetry: <pre><code>[tool.poetry.plugins.\"terraflex.plugins.transformer\"]\nencryption = \"terraflex.plugins.encryption_transformation.encryption_transformation_provider:EncryptionTransformation\"\n</code></pre></p> Source code in <code>terraflex/server/transformation_base.py</code> <pre><code>@runtime_checkable\nclass TransformerProtocol(Protocol):\n    \"\"\"Protocol for state transformation providers.\n\n    Every state transformation provider must implement `TransformerProtocol` methods - and register to the `terraflex.plugins.transformer` entrypoint.\n\n    Example:\n        Register encryption transformer - if your project is based on poetry:\n        ```toml\n        [tool.poetry.plugins.\"terraflex.plugins.transformer\"]\n        encryption = \"terraflex.plugins.encryption_transformation.encryption_transformation_provider:EncryptionTransformation\"\n        ```\n    \"\"\"\n\n    @classmethod\n    async def from_config(\n        cls,\n        raw_config: Any,\n        *,\n        storage_providers: dict[str, StorageProviderProtocol],\n        manager: DependenciesManager,\n        workdir: pathlib.Path,\n    ) -&gt; Self:\n        \"\"\"Create an instance of the transformation provider from the configuration.\n\n        Args:\n            raw_config: The raw configuration propagated from the transformer config.\n            storage_providers: All the initialized storage providers specified in the config file.\n            manager: The dependencies manager - allows to request a binary path from.\n            workdir: The data directory of terraflex - located at `~/.local/share/terraflex` -\n                can be used to manage state of the provider.\n        \"\"\"\n        ...\n\n    async def transform_write_file_content(self, file_identifier: str, content: bytes) -&gt; bytes:\n        \"\"\"Transform the content of the file before writing it to the storage provider.\n\n        Args:\n            file_identifier: The identifier of the file - calculated by calling to_string()\n                method of the storage usage params.\n            content: The content of the file.\n        \"\"\"\n        ...\n\n    async def transform_read_file_content(self, file_identifier: str, content: bytes) -&gt; bytes:\n        \"\"\"Transform the content of the file after reading it from the storage provider.\n\n        Args:\n            file_identifier: The identifier of the file - calculated by calling to_string()\n                method of the storage usage params.\n            content: The content of the file.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"reference/general/03-transformers/#terraflex.server.transformation_base.TransformerProtocol.from_config","title":"<code>from_config(raw_config, *, storage_providers, manager, workdir)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create an instance of the transformation provider from the configuration.</p> <p>Parameters:</p> Name Type Description Default <code>raw_config</code> <code>Any</code> <p>The raw configuration propagated from the transformer config.</p> required <code>storage_providers</code> <code>dict[str, StorageProviderProtocol]</code> <p>All the initialized storage providers specified in the config file.</p> required <code>manager</code> <code>DependenciesManager</code> <p>The dependencies manager - allows to request a binary path from.</p> required <code>workdir</code> <code>Path</code> <p>The data directory of terraflex - located at <code>~/.local/share/terraflex</code> - can be used to manage state of the provider.</p> required Source code in <code>terraflex/server/transformation_base.py</code> <pre><code>@classmethod\nasync def from_config(\n    cls,\n    raw_config: Any,\n    *,\n    storage_providers: dict[str, StorageProviderProtocol],\n    manager: DependenciesManager,\n    workdir: pathlib.Path,\n) -&gt; Self:\n    \"\"\"Create an instance of the transformation provider from the configuration.\n\n    Args:\n        raw_config: The raw configuration propagated from the transformer config.\n        storage_providers: All the initialized storage providers specified in the config file.\n        manager: The dependencies manager - allows to request a binary path from.\n        workdir: The data directory of terraflex - located at `~/.local/share/terraflex` -\n            can be used to manage state of the provider.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/03-transformers/#terraflex.server.transformation_base.TransformerProtocol.transform_read_file_content","title":"<code>transform_read_file_content(file_identifier, content)</code>  <code>async</code>","text":"<p>Transform the content of the file after reading it from the storage provider.</p> <p>Parameters:</p> Name Type Description Default <code>file_identifier</code> <code>str</code> <p>The identifier of the file - calculated by calling to_string() method of the storage usage params.</p> required <code>content</code> <code>bytes</code> <p>The content of the file.</p> required Source code in <code>terraflex/server/transformation_base.py</code> <pre><code>async def transform_read_file_content(self, file_identifier: str, content: bytes) -&gt; bytes:\n    \"\"\"Transform the content of the file after reading it from the storage provider.\n\n    Args:\n        file_identifier: The identifier of the file - calculated by calling to_string()\n            method of the storage usage params.\n        content: The content of the file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/03-transformers/#terraflex.server.transformation_base.TransformerProtocol.transform_write_file_content","title":"<code>transform_write_file_content(file_identifier, content)</code>  <code>async</code>","text":"<p>Transform the content of the file before writing it to the storage provider.</p> <p>Parameters:</p> Name Type Description Default <code>file_identifier</code> <code>str</code> <p>The identifier of the file - calculated by calling to_string() method of the storage usage params.</p> required <code>content</code> <code>bytes</code> <p>The content of the file.</p> required Source code in <code>terraflex/server/transformation_base.py</code> <pre><code>async def transform_write_file_content(self, file_identifier: str, content: bytes) -&gt; bytes:\n    \"\"\"Transform the content of the file before writing it to the storage provider.\n\n    Args:\n        file_identifier: The identifier of the file - calculated by calling to_string()\n            method of the storage usage params.\n        content: The content of the file.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/general/04-entrypoints/","title":"Plugin Entrypoints","text":"<p>Terraflex is built in a modular way - that should be easily extendable by others - without the need of modifying terraflex itself and releasing new versions. A contribution is always welcome, but if you don't feel like it / have a capability and still want to use Terraflex's features - it's possible by the way Terraflex is implemented. Terraflex uses Python entry_points() to fetch all additinal extensions dynamically. More information about entry-points is available at the python packaging official docs.  </p> <p>Note</p> <p>If you want to use your new extension with Terraflex - make sure the extension/plugin is installed in the same virtual env as Terraflex. For example if you use pipx - you might need to use  <pre><code>$ pipx inject terraflex &lt;plugin&gt;\n</code></pre></p>"},{"location":"reference/general/04-entrypoints/#terraflexpluginsstorage_provider","title":"<code>terraflex.plugins.storage_provider</code>","text":"<p>Entrypoint that allows to extend the supported storage providers by Terraflex. The <code>type</code> of the storage provider will be the name of the entrypoint registered. Every provider must implement one of the storage provider protocols.</p> <ul> <li> <p>Readable storage - marked by -  </p> </li> <li> <p>Writable storage  - marked by -  </p> </li> <li> <p>Lockable storage  - marked by -  </p> </li> </ul>"},{"location":"reference/general/04-entrypoints/#terraflexpluginstransformer","title":"<code>terraflex.plugins.transformer</code>","text":"<p>Entrypoint that allows to extend the supported transformers by Terraflex. The <code>type</code> of the transformer will be the name of the entrypoint registered. Every provider must implement the transformer protocol.  </p>"},{"location":"reference/general/04-entrypoints/#terraflexpluginstransformerencryption","title":"<code>terraflex.plugins.transformer.encryption</code>","text":"<p>Entrypoint that allows to extend the supported encryption types by Terraflex. The <code>type</code> of the transformer will be the name of the entrypoint registered. Every provider must implement the encryption protocol.  </p>"},{"location":"reference/storage-providers/envvar/","title":"EnvVar","text":"<p>EnvVar storage providers allows to read environment variables and pass them around to consumer - like a transformer.  </p> <p>Notice</p> <p>This storage provider can not be used to manage terraform state files.</p> <p>Tip</p> <p>This provider was mainly developed to serve encryption providers - like age.  </p>"},{"location":"reference/storage-providers/envvar/#initialization","title":"Initialization","text":""},{"location":"reference/storage-providers/envvar/#terraflex.plugins.envvar_storage_provider.envvar_storage_provider.EnvVarStorageProviderInitConfig","title":"<code>EnvVarStorageProviderInitConfig</code>","text":"<p>Initialization params required to initialize EnvVar storage provider.</p> <p>EnvVar storage provider currently have no initialization params required.</p> Source code in <code>terraflex/plugins/envvar_storage_provider/envvar_storage_provider.py</code> <pre><code>class EnvVarStorageProviderInitConfig(BaseModel):\n    \"\"\"Initialization params required to initialize EnvVar storage provider.\n\n    EnvVar storage provider currently have no initialization params required.\n    \"\"\"\n</code></pre>"},{"location":"reference/storage-providers/envvar/#itemkey","title":"ItemKey","text":""},{"location":"reference/storage-providers/envvar/#terraflex.plugins.envvar_storage_provider.envvar_storage_provider.EnvVarStorageProviderItemIdentifier","title":"<code>EnvVarStorageProviderItemIdentifier</code>","text":"<p>               Bases: <code>ItemKey</code></p> <p>Params required to reference an item in EnvVar storage provider.</p> <p>Attributes:</p> Name Type Description <code>key</code> <code>str</code> <p>The name of the environment variable to read.</p> Source code in <code>terraflex/plugins/envvar_storage_provider/envvar_storage_provider.py</code> <pre><code>class EnvVarStorageProviderItemIdentifier(ItemKey):\n    \"\"\"Params required to reference an item in EnvVar storage provider.\n\n    Attributes:\n        key: The name of the environment variable to read.\n    \"\"\"\n\n    key: str\n\n    @override\n    def as_string(self) -&gt; str:\n        return self.key\n</code></pre>"},{"location":"reference/storage-providers/envvar/#example","title":"Example","text":"terraflex.yaml<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n\n  envvar-example: # Initialize new storage provider - name can be anything\n    type: envvar # In this case we use `envvar` storage provider\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: envvar-example # Make sure name is matching your storage provider\n      params:\n        key: AGE_KEY # The environment variable name to use for the encryption key\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: git-storage # In this case we use our git storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"reference/storage-providers/git/","title":"Git","text":"<p>Git storage provider is capable of holding terraform state files as it's a writable storage type. This provider is also lockable - and because this storage type is backed up by a remote origin usually -  it allows multiple users to work on the same state files without the risk of overriding eachother (the lock should protect the state file). This storage provider was heavily influenced by terraform-backend-git.  </p> <p>Danger</p> <p>It's highly recommended to not use this provider plainly without any transformer for the state file - as state files contains sensitive data. See encryption transformer, to make git storage provider a viable solution to store terraform state files -  without any additional cost - and with a minimal setup required.</p>"},{"location":"reference/storage-providers/git/#initialization","title":"Initialization","text":""},{"location":"reference/storage-providers/git/#terraflex.plugins.git_storage_provider.git_storage_provider.GitStorageProviderInitConfig","title":"<code>GitStorageProviderInitConfig</code>","text":"<p>Initialization params required to initialize Git storage provider.</p> <p>Attributes:</p> Name Type Description <code>origin_url</code> <code>str</code> <p>The URL of the git repository. Must be accessible by the current user. Example: git@github.com:IamShobe/tf-state.git</p> <code>ref</code> <code>str</code> <p>The branch to use.</p> <code>clone_path</code> <code>Optional[Path]</code> <p>The path to clone the repository to. Default: None. (will be set to ~/.local/share/terraflex/git_storage/) Source code in <code>terraflex/plugins/git_storage_provider/git_storage_provider.py</code> <pre><code>class GitStorageProviderInitConfig(BaseModel):\n    \"\"\"Initialization params required to initialize Git storage provider.\n\n    Attributes:\n        origin_url: The URL of the git repository. Must be accessible by the current user.\n            Example: git@github.com:IamShobe/tf-state.git\n        ref: The branch to use.\n        clone_path: The path to clone the repository to. Default: None. (will be set to ~/.local/share/terraflex/git_storage/&lt;repo_name&gt;)\n    \"\"\"\n\n    origin_url: str\n    ref: str = \"main\"\n    clone_path: Optional[pathlib.Path] = None\n</code></pre>"},{"location":"reference/storage-providers/git/#itemkey","title":"ItemKey","text":""},{"location":"reference/storage-providers/git/#terraflex.plugins.git_storage_provider.git_storage_provider.GitStorageProviderItemIdentifier","title":"<code>GitStorageProviderItemIdentifier</code>","text":"<p>               Bases: <code>ItemKey</code></p> <p>Params required to reference an item in Git storage provider.</p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>The path to a specific file relative to the repository root, folders are also allowed as part of the path.</p> Source code in <code>terraflex/plugins/git_storage_provider/git_storage_provider.py</code> <pre><code>class GitStorageProviderItemIdentifier(ItemKey):\n    \"\"\"Params required to reference an item in Git storage provider.\n\n    Attributes:\n        path: The path to a specific file relative to the repository root,\n            folders are also allowed as part of the path.\n    \"\"\"\n\n    path: str\n\n    @override\n    def as_string(self) -&gt; str:\n        return self.path\n</code></pre>"},{"location":"reference/storage-providers/git/#example","title":"Example","text":"terraflex.yaml<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n\n  envvar-example: # Initialize new storage provider - name can be anything\n    type: envvar # In this case we use `envvar` storage provider\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: envvar-example # Make sure name is matching your storage provider\n      params:\n        key: AGE_KEY # The environment variable name to use for the encryption key\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: git-storage # In this case we use our git storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"reference/storage-providers/local/","title":"Local","text":"<p>The most basic storage provider - that uses local disk paths. It can be used for basic rigging over local disk paths.  </p> <p>Tip</p> <p>This provider allow you to use shared disk paths as well - like NFS folders or FUSE mounts using rclone</p>"},{"location":"reference/storage-providers/local/#initialization","title":"Initialization","text":""},{"location":"reference/storage-providers/local/#terraflex.plugins.local_storage_provider.local_storage_provider.LocalStorageProviderInitConfig","title":"<code>LocalStorageProviderInitConfig</code>","text":"<p>Initialization params required to initialize Local storage provider.</p> <p>Attributes:</p> Name Type Description <code>folder</code> <code>Path</code> <p>The path to the directory where the files will be stored.</p> <code>folder_mode</code> <code>int</code> <p>The mode to set on the folder. Default: 0o700.</p> <code>file_mode</code> <code>int</code> <p>The mode to set on the files. Default: 0o600.</p> Source code in <code>terraflex/plugins/local_storage_provider/local_storage_provider.py</code> <pre><code>class LocalStorageProviderInitConfig(BaseModel):\n    \"\"\"Initialization params required to initialize Local storage provider.\n\n    Attributes:\n        folder: The path to the directory where the files will be stored.\n        folder_mode: The mode to set on the folder. Default: 0o700.\n        file_mode: The mode to set on the files. Default: 0o600.\n    \"\"\"\n\n    folder: pathlib.Path\n    folder_mode: int = 0o700\n    file_mode: int = 0o600\n</code></pre>"},{"location":"reference/storage-providers/local/#itemkey","title":"ItemKey","text":""},{"location":"reference/storage-providers/local/#terraflex.plugins.local_storage_provider.local_storage_provider.LocalStorageProviderItemIdentifier","title":"<code>LocalStorageProviderItemIdentifier</code>","text":"<p>               Bases: <code>ItemKey</code></p> <p>Params required to reference an item in Local storage provider.</p> <p>Attributes:</p> Name Type Description <code>path</code> <code>str</code> <p>The path to a specific file relative to the directory root, folders are also allowed as part of the path.</p> Source code in <code>terraflex/plugins/local_storage_provider/local_storage_provider.py</code> <pre><code>class LocalStorageProviderItemIdentifier(ItemKey):\n    \"\"\"Params required to reference an item in Local storage provider.\n\n    Attributes:\n        path: The path to a specific file relative to the directory root,\n            folders are also allowed as part of the path.\n    \"\"\"\n\n    path: str\n\n    @override\n    def as_string(self) -&gt; str:\n        return self.path\n</code></pre>"},{"location":"reference/storage-providers/local/#example","title":"Example","text":"terraflex.yaml<pre><code>storage_providers:\n  local: # Initialize new storage provider - name can be anything\n    type: local\n    folder: ~/states/\n\n  encryption-dir:\n    type: local\n    folder: ~/secrets/\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: encryption-dir # Make sure name is matching your storage provider\n      params:\n        path: age-key.txt # The path to the encryption key file inside ~/secrets/\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: local # In this case we use our local storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"reference/storage-providers/onepassword/","title":"1Password","text":"<p>1Password storage providers allows to read vault items and pass them around to a consumer - like a transformer. If you have a 1Password account it's highly recommended to keep your encryption private key stored there.  </p> <p>Notice</p> <p>This storage provider can not be used to manage terraform state files.</p> <p>Tip</p> <p>This provider was mainly developed to serve encryption providers - like age.  </p>"},{"location":"reference/storage-providers/onepassword/#initialization","title":"Initialization","text":""},{"location":"reference/storage-providers/onepassword/#terraflex.plugins.onepassword_storage_provider.onepassword_storage_provider.OnePasswordStorageProviderInitConfig","title":"<code>OnePasswordStorageProviderInitConfig</code>","text":"<p>Initialization params required to initialize 1Password storage provider.</p> <p>1Password storage provider currently have no initialization params required.</p> Source code in <code>terraflex/plugins/onepassword_storage_provider/onepassword_storage_provider.py</code> <pre><code>class OnePasswordStorageProviderInitConfig(BaseModel):\n    \"\"\"Initialization params required to initialize 1Password storage provider.\n\n    1Password storage provider currently have no initialization params required.\n    \"\"\"\n</code></pre>"},{"location":"reference/storage-providers/onepassword/#itemkey","title":"ItemKey","text":""},{"location":"reference/storage-providers/onepassword/#terraflex.plugins.onepassword_storage_provider.onepassword_storage_provider.OnePasswordProviderItemIdentifier","title":"<code>OnePasswordProviderItemIdentifier</code>","text":"<p>               Bases: <code>ItemKey</code></p> <p>Params required to reference an item in 1Password storage provider.</p> <p>Attributes:</p> Name Type Description <code>reference_uri</code> <code>str</code> <p>1Password URI to the item. Example: <code>op://&lt;vault&gt;/&lt;item&gt;/&lt;field&gt;</code></p> Source code in <code>terraflex/plugins/onepassword_storage_provider/onepassword_storage_provider.py</code> <pre><code>class OnePasswordProviderItemIdentifier(ItemKey):\n    \"\"\"Params required to reference an item in 1Password storage provider.\n\n    Attributes:\n        reference_uri: 1Password URI to the item. Example: `op://&lt;vault&gt;/&lt;item&gt;/&lt;field&gt;`\n    \"\"\"\n\n    reference_uri: str\n\n    @override\n    def as_string(self) -&gt; str:\n        return self.reference_uri.replace(\"/\", \"_\").replace(\":\", \"_\")\n</code></pre>"},{"location":"reference/storage-providers/onepassword/#example","title":"Example","text":"terraflex.yaml<pre><code>storage_providers:\n  git-storage: # Initialize new storage provider - name can be anything\n    type: git # In this case we use `git` storage provider\n    origin_url: git@github.com:IamShobe/tf-state.git\n\n  onepassword-example: # Initialize new storage provider - name can be anything\n    type: onepassword # In this case we use `1password` storage provider\n\ntransformers:\n  encryption: # Initialize new transformer - Name can be anything, we use `encryption` for semantics.\n    type: encryption # In this case we use `encryption` transformer\n    key_type: age # We use `age` as the encryption provider\n    import_from_storage:\n      provider: onepassword-example # Make sure name is matching your storage provider\n      params:\n        reference_uri: op://AutomationIAC/iac-terraform-age-key/password # The reference URI to use for the encryption key\n\nstacks:\n  my-stack: # Initialize new stack - Name can be anything\n    transformers: # List of transformers to use in this specific stack\n      - encryption # Make sure name is matching your transformer\n    state_storage: # Terraform state storage configuration\n      provider: git-storage # In this case we use our git storage provider\n      params:\n        path: terraform.tfstate # The path to the state file inside our repository\n</code></pre>"},{"location":"reference/transformers/encryption/","title":"Encryption","text":"<p>Encryption transformer is meant to be used to encyrpt and decrypt the terraform state file. It's built in a modular way to allow adding encryption providers easily.  </p> <p>Note</p> <p>See entrypoint for additional information about the entrypoint.</p>"},{"location":"reference/transformers/encryption/#usage","title":"Usage","text":"<p>Transformer that encrypts and decrypts the content of the files using the specified encryption provider.</p> <p>Attributes:</p> Name Type Description <code>key_type</code> <code>str</code> <p>The type of the encryption key.</p> <code>**kwargs</code> <code>str</code> <p>Additional configuration for the encryption provider.</p> Example <p>Encryption transformer with <code>age</code> encryption provider: <pre><code>type: encryption\nkey_type: age\nimport_from_storage:\n    provider: envvar\n    params:\n        key: AGE_PRIVATE_KEY\n</code></pre></p> Source code in <code>terraflex/plugins/encryption_transformation/encryption_transformation_provider.py</code> <pre><code>class EncryptionTransformerConfig(BaseModel):\n    \"\"\"Transformer that encrypts and decrypts the content of the files using the specified encryption provider.\n\n    Attributes:\n        key_type: The type of the encryption key.\n        **kwargs: Additional configuration for the encryption provider.\n\n    Example:\n        Encryption transformer with `age` encryption provider:\n        ```yaml\n        type: encryption\n        key_type: age\n        import_from_storage:\n            provider: envvar\n            params:\n                key: AGE_PRIVATE_KEY\n        ```\n    \"\"\"\n\n    model_config = ConfigDict(extra=\"allow\")\n    key_type: str\n</code></pre>"},{"location":"reference/transformers/encryption/#encryption-protocol-specification","title":"Encryption Protocol Specification","text":""},{"location":"reference/transformers/encryption/#terraflex.plugins.encryption_transformation.encryption_base.EncryptionProtocol","title":"<code>EncryptionProtocol</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for encryption providers.</p> <p>Every encryption provider must implement <code>EncryptionProtocol</code> methods - and register to the <code>terraflex.plugins.transformer.encryption</code> entrypoint.</p> Example <p>Register age encryption provider - if your project is based on poetry: <pre><code>[tool.poetry.plugins.\"terraflex.plugins.transformer.encryption\"]\nage = \"terraflex.plugins.encryption_transformation.age.provider:AgeEncryptionProvider\"\n</code></pre></p> Source code in <code>terraflex/plugins/encryption_transformation/encryption_base.py</code> <pre><code>@runtime_checkable\nclass EncryptionProtocol(Protocol):\n    \"\"\"Protocol for encryption providers.\n\n\n    Every encryption provider must implement `EncryptionProtocol` methods - and register to the `terraflex.plugins.transformer.encryption` entrypoint.\n\n    Example:\n        Register age encryption provider - if your project is based on poetry:\n        ```toml\n        [tool.poetry.plugins.\"terraflex.plugins.transformer.encryption\"]\n        age = \"terraflex.plugins.encryption_transformation.age.provider:AgeEncryptionProvider\"\n        ```\n    \"\"\"\n\n    @classmethod\n    async def from_config(\n        cls,\n        raw_config: Any,\n        *,\n        storage_providers: dict[str, StorageProviderProtocol],\n        manager: DependenciesManager,\n    ) -&gt; Self:\n        \"\"\"Create an instance of the encryption provider from the configuration.\n\n        Args:\n            raw_config: The raw configuration propagated from the transformer config.\n            storage_providers: All the initialized storage providers specified in the config file.\n            manager: The dependencies manager - allows to request a binary path from.\n\n        Returns:\n            The initialized instance of the encryption provider.\n        \"\"\"\n        ...\n\n    async def encrypt(self, file_name: str, content: bytes) -&gt; bytes:\n        \"\"\"Encrypt the content of the file.\n\n        Args:\n            file_name: The name of the file.\n            content: The content of the file.\n\n        Returns:\n            The encrypted content.\n        \"\"\"\n        ...\n\n    async def decrypt(self, file_name: str, content: bytes) -&gt; bytes:\n        \"\"\"Decrypt the content of the file.\n\n        Args:\n            file_name: The name of the file.\n            content: The content of the file.\n\n        Returns:\n            The decrypted content.\n        \"\"\"\n        ...\n</code></pre>"},{"location":"reference/transformers/encryption/#terraflex.plugins.encryption_transformation.encryption_base.EncryptionProtocol.decrypt","title":"<code>decrypt(file_name, content)</code>  <code>async</code>","text":"<p>Decrypt the content of the file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the file.</p> required <code>content</code> <code>bytes</code> <p>The content of the file.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The decrypted content.</p> Source code in <code>terraflex/plugins/encryption_transformation/encryption_base.py</code> <pre><code>async def decrypt(self, file_name: str, content: bytes) -&gt; bytes:\n    \"\"\"Decrypt the content of the file.\n\n    Args:\n        file_name: The name of the file.\n        content: The content of the file.\n\n    Returns:\n        The decrypted content.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/transformers/encryption/#terraflex.plugins.encryption_transformation.encryption_base.EncryptionProtocol.encrypt","title":"<code>encrypt(file_name, content)</code>  <code>async</code>","text":"<p>Encrypt the content of the file.</p> <p>Parameters:</p> Name Type Description Default <code>file_name</code> <code>str</code> <p>The name of the file.</p> required <code>content</code> <code>bytes</code> <p>The content of the file.</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The encrypted content.</p> Source code in <code>terraflex/plugins/encryption_transformation/encryption_base.py</code> <pre><code>async def encrypt(self, file_name: str, content: bytes) -&gt; bytes:\n    \"\"\"Encrypt the content of the file.\n\n    Args:\n        file_name: The name of the file.\n        content: The content of the file.\n\n    Returns:\n        The encrypted content.\n    \"\"\"\n    ...\n</code></pre>"},{"location":"reference/transformers/encryption/#terraflex.plugins.encryption_transformation.encryption_base.EncryptionProtocol.from_config","title":"<code>from_config(raw_config, *, storage_providers, manager)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Create an instance of the encryption provider from the configuration.</p> <p>Parameters:</p> Name Type Description Default <code>raw_config</code> <code>Any</code> <p>The raw configuration propagated from the transformer config.</p> required <code>storage_providers</code> <code>dict[str, StorageProviderProtocol]</code> <p>All the initialized storage providers specified in the config file.</p> required <code>manager</code> <code>DependenciesManager</code> <p>The dependencies manager - allows to request a binary path from.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The initialized instance of the encryption provider.</p> Source code in <code>terraflex/plugins/encryption_transformation/encryption_base.py</code> <pre><code>@classmethod\nasync def from_config(\n    cls,\n    raw_config: Any,\n    *,\n    storage_providers: dict[str, StorageProviderProtocol],\n    manager: DependenciesManager,\n) -&gt; Self:\n    \"\"\"Create an instance of the encryption provider from the configuration.\n\n    Args:\n        raw_config: The raw configuration propagated from the transformer config.\n        storage_providers: All the initialized storage providers specified in the config file.\n        manager: The dependencies manager - allows to request a binary path from.\n\n    Returns:\n        The initialized instance of the encryption provider.\n    \"\"\"\n    ...\n</code></pre>"}]}